// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package models

import "encoding/json"
import "fmt"

type School struct {
	// School city
	City string `json:"city" yaml:"city" mapstructure:"city"`

	// School name
	Name string `json:"name" yaml:"name" mapstructure:"name"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *School) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["city"]; !ok || v == nil {
		return fmt.Errorf("field city in School: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in School: required")
	}
	type Plain School
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = School(plain)
	return nil
}

type Player struct {
	// Player name
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Player number
	Number int `json:"number" yaml:"number" mapstructure:"number"`

	// Player position
	Position string `json:"position" yaml:"position" mapstructure:"position"`

	// Player school
	School School `json:"school" yaml:"school" mapstructure:"school"`

	// Player team
	Team string `json:"team" yaml:"team" mapstructure:"team"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Player) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in Player: required")
	}
	if v, ok := raw["number"]; !ok || v == nil {
		return fmt.Errorf("field number in Player: required")
	}
	if v, ok := raw["position"]; !ok || v == nil {
		return fmt.Errorf("field position in Player: required")
	}
	if v, ok := raw["school"]; !ok || v == nil {
		return fmt.Errorf("field school in Player: required")
	}
	if v, ok := raw["team"]; !ok || v == nil {
		return fmt.Errorf("field team in Player: required")
	}
	type Plain Player
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Player(plain)
	return nil
}
