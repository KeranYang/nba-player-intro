// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Player player
//
// swagger:model Player
type Player struct {

	// the player's name
	Name string `json:"name,omitempty"`

	// the player's number
	Number int32 `json:"number,omitempty"`

	// the player's position
	Position string `json:"position,omitempty"`

	// the player's team name
	Team string `json:"team,omitempty"`

	// school
	School *School `json:"school,omitempty"`
}

// Validate validates this player
func (m *Player) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSchool(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Player) validateSchool(formats strfmt.Registry) error {
	if swag.IsZero(m.School) { // not required
		return nil
	}

	if m.School != nil {
		if err := m.School.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("school")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("school")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this player based on the context it is used
func (m *Player) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSchool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Player) contextValidateSchool(ctx context.Context, formats strfmt.Registry) error {

	if m.School != nil {
		if err := m.School.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("school")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("school")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Player) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Player) UnmarshalBinary(b []byte) error {
	var res Player
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
